import unittest
import os
import shutil
from copy import copy

from projectenv.scriptgen import ScriptGenerator

class ScriptGeneratorTestCase(unittest.TestCase):

    env = {
        'foo': 'bar',
        'bar': None,
        '_PROJECTENV_foo': '$foo',
        'biz': 'baz'
    }

    sh_lines = [
        '#!/bin/sh',
        '# Auto-generated by projectenv',
        'export foo=bar',
        'export _PROJECTENV_foo=$foo',
        'export biz=baz',
        'unset bar'
    ]

    csh_lines = [
        '#!/bin/csh',
        '# Auto-generated by projectenv',
        'setenv foo bar',
        'setenv _PROJECTENV_foo $foo',
        'setenv biz baz',
        'unsetenv bar'
    ]

    def setUp(self):
        os.makedirs('test/output')

    def tearDown(self):
        shutil.rmtree('test/output')

    def test_scriptgen_sh(self):
        ScriptGenerator(self.env).write('test/output/script')

        # tests for bourne shell
        self.assertTrue(os.path.exists('test/output/script.sh'),
                "contents of 'test/output': %s" % os.listdir('test/output'))
        f = open('test/output/script.sh')
        lines = f.readlines()
        for line in lines:
            self.assertTrue(line.rstrip() in self.sh_lines,
                "expected '%s' to be in %s" % (line, str(self.sh_lines)))
        self.assertEqual(lines[0].rstrip(), self.sh_lines[0])
        self.assertEqual(lines[1].rstrip(), self.sh_lines[1])

        # tests for c shell
        self.assertTrue(os.path.exists('test/output/script.csh'),
                "contents of 'test/output': %s" % os.listdir('test/output'))
        f = open('test/output/script.csh')
        lines = f.readlines()
        for line in lines:
            self.assertTrue(line.rstrip() in self.csh_lines,
                "expected '%s' to be in %s" % (line, str(self.csh_lines)))
        self.assertEqual(lines[0].rstrip(), self.csh_lines[0])
        self.assertEqual(lines[1].rstrip(), self.csh_lines[1])

    def test__script_order_key__sh(self):
        lines = [
            'export foo=bar',
            'unset _PROJECTENV_bar',
            'export _PROJECTENV_biz=baz',
            'unset goo'
        ]

        lines.sort(key=ScriptGenerator()._script_order_key)
        self.assertEqual(lines, [
            'export _PROJECTENV_biz=baz',
            'export foo=bar',
            'unset goo',
            'unset _PROJECTENV_bar'
        ])

    def test__script_order_key__csh(self):
        lines = [
            'setenv foo=bar',
            'unsetenv _PROJECTENV_bar',
            'setenv _PROJECTENV_biz=baz',
            'unsetenv goo'
        ]

        lines.sort(key=ScriptGenerator()._script_order_key)
        self.assertEqual(lines, [
            'setenv _PROJECTENV_biz=baz',
            'setenv foo=bar',
            'unsetenv goo',
            'unsetenv _PROJECTENV_bar'
        ])
